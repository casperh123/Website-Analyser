// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteAnalyzer.Infrastructure.Data;

#nullable disable

namespace WebsiteAnalyzer.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.BrokenLink.BrokenLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnchorText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BrokenLinkCrawlId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Line")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferringPage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetPage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrokenLinkCrawlId");

                    b.ToTable("BrokenLinks");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.BrokenLink.BrokenLinkCrawl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinksChecked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BrokenLinkCrawls");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.CacheWarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduleAction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScheduleUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScheduleUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("VisitedPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WebsiteUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteUrl", "WebsiteUserId");

                    b.HasIndex("ScheduleUserId", "ScheduleUrl", "ScheduleAction");

                    b.ToTable("CacheWarms");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.CrawlSchedule", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastCrawlDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "Url", "Action");

                    b.ToTable("CrawlSchedules");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.Website.Website", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Url", "UserId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.BrokenLink.BrokenLink", b =>
                {
                    b.HasOne("WebsiteAnalyzer.Core.Entities.BrokenLink.BrokenLinkCrawl", "BrokenLinkCrawl")
                        .WithMany("BrokenLinks")
                        .HasForeignKey("BrokenLinkCrawlId");

                    b.Navigation("BrokenLinkCrawl");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.CacheWarm", b =>
                {
                    b.HasOne("WebsiteAnalyzer.Core.Entities.Website.Website", null)
                        .WithMany("CacheWarmRuns")
                        .HasForeignKey("WebsiteUrl", "WebsiteUserId");

                    b.HasOne("WebsiteAnalyzer.Core.Entities.CrawlSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleUserId", "ScheduleUrl", "ScheduleAction");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.BrokenLink.BrokenLinkCrawl", b =>
                {
                    b.Navigation("BrokenLinks");
                });

            modelBuilder.Entity("WebsiteAnalyzer.Core.Entities.Website.Website", b =>
                {
                    b.Navigation("CacheWarmRuns");
                });
#pragma warning restore 612, 618
        }
    }
}
