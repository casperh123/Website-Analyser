@implements IDisposable

@inject NavigationManager NavigationManager
@inject ThemeService ThemeService

<header class="header">
    <a href="">
    <div class="header-logo-title-container">
        <RadzenImage Path="@_logoPath" class="header-icon"></RadzenImage>
        <div class="header-title-container">
            <div class="navbar-brand">
                <RadzenText TextStyle="TextStyle.H4" Style="margin-bottom: 0;">Clypper's</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Style="margin-bottom: 0;">Website Analyzer</RadzenText>
            </div>
        </div>
    </div>
    </a>

    <div class="nav-wrapper">
        <RadzenMenu Responsive="false">
            <RadzenMenuItem Text="Cache Warmer" Path="/cache-warmer" Icon="local_fire_department"/>
            <RadzenMenuItem Text="Broken Link Checker" Path="/broken-link-checker" Icon="link_off"/>
            <RadzenMenuItem Text="Website Analyser" Path="/website-analyser-legacy"/>
        </RadzenMenu>
    </div>

    <div class="utility-menu">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="2rem" Wrap="FlexWrap.Wrap" class="rz-mr-3">
            <RadzenAppearanceToggle/>
        </RadzenStack>
        <AuthorizeView>
            <Authorized>
                <RadzenProfileMenu>
                    <Template>
                        <RadzenGravatar Email="@context.User.Identity?.Name">
                        </RadzenGravatar>
                    </Template>
                    <ChildContent>
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" class="rz-p-3 rz-mb-3">
                            <RadzenLabel Text="Change the current theme"/>
                            <RadzenDropDown Name="ThemeDropDown" TValue="string" Value="@ThemeService.Theme" ValueChanged="@ChangeTheme" Data="@Themes.Free" TextProperty=@nameof(Theme.Text) ValueProperty=@nameof(Theme.Value)>
                            </RadzenDropDown>
                        </RadzenStack>
                        <RadzenProfileMenuItem Text="Profile Settings" Path="Account/Manage"/>
                        <form action="Account/Logout" method="post" class="rz-p-3">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                            <RadzenButton ButtonType="ButtonType.Submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </RadzenButton>
                        </form>
                    </ChildContent>
                </RadzenProfileMenu>
            </Authorized>
            <NotAuthorized>
                <RadzenMenu>
                    <RadzenLink Path="Account/Login">
                        <RadzenButton Text="Login"/>
                    </RadzenLink>
                    <RadzenMenuItem Text="Register" Path="Account/Register"/>
                </RadzenMenu>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</header>

@code {
    private string? _logoPath;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override void OnParametersSet()
    {
        ThemeService.ThemeChanged += ThemeChanged;
        
        ThemeChanged();
    }

    protected void ThemeChanged()
    {
        if (ThemeService.Theme.Contains("dark", StringComparison.OrdinalIgnoreCase))
        {
            _logoPath = "/images/W_N_SVG_ClypperLogo.svg";
        }
        else
        {
            _logoPath = "/images/B_N_SVG_ClypperLogo.svg";
        }
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    
    void ChangeTheme(string value)
    {
        ThemeService.SetTheme(value);
    }
}

