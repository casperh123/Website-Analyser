@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Core.Enums
@using WebsiteAnalyzer.Core.Exceptions
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Models
@using WebsiteAnalyzer.Web.Components.ErrorHandling
@using WebsiteAnalyzer.Web.Components.Schedule.Lists
@using WebsiteAnalyzer.Web.Components.User

@inject IScheduleService ScheduleService

<AuthorizeView>
    <Authorized>
        <RadzenButton Text="New Task" Click="ToggleAddNew" Icon="add" ButtonStyle="ButtonStyle.Primary"/>

        @if (_addNew)
        {
            <RadzenCard class="rz-mt-6">
                <RadzenStack Gap="20px">

                    <RadzenText TextStyle="TextStyle.H4">Add new @Action Task</RadzenText>

                    <RadzenTemplateForm TItem="ScheduleTaskModel"
                                        Data="_scheduleTask"
                                        Submit="@HandleValidSubmit"
                                        Context="taskModel">
                        <RadzenFormField Text="Website Url">
                            <RadzenTextBox @bind-Value="@_scheduleTask.WebsiteUrl"
                                           Name="WebsiteUrl"
                                           Placeholder="Enter website URL"/>
                            <RadzenRequiredValidator Component="WebsiteUrl"
                                                     Text="Website URL is required"/>
                            <RadzenRegexValidator Component="WebsiteUrl"
                                                  Pattern="@_urlRegex"
                                                  Text="Url must start with http:// or https:// and end with .TLD"/>
                        </RadzenFormField>

                        <RadzenFormField Text="Action">
                            <RadzenTextBox Value="@Action.ToString()"
                                           Disabled="true"/>
                        </RadzenFormField>

                        <RadzenFormField Text="Frequency">
                            <RadzenDropDown @bind-Value="_scheduleTask.Frequency"
                                            Data="Frequencies"
                                            Name="Frequency"/>
                        </RadzenFormField>
                        <RadzenRequiredValidator Component="Frequency"
                                                 Text="Frequency is required"/>

                        <RadzenStack Orientation="Orientation.Horizontal"
                                     class="mt-4">
                            <RadzenButton Text="Schedule"
                                          ButtonType="ButtonType.Submit"
                                          ButtonStyle="ButtonStyle.Success"/>
                            <RadzenButton Text="Cancel"
                                          Click="ToggleAddNew"
                                          ButtonStyle="ButtonStyle.Secondary"/>
                        </RadzenStack>
                        <ErrorMessage Message="@_errorMessage"/>
                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
        }

        <ScheduledTaskDataGrid ScheduledTasks="@_scheduledTasks" OnScheduleDeleted="DeleteTask" />
    </Authorized>
    <NotAuthorized>
        <SignUp User="User"/>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter] 
    public required ApplicationUser? User { get; set; }

    [Parameter] 
    public required CrawlAction Action { get; set; }

    private ScheduleTaskModel _scheduleTask = new();
    private IEnumerable<Frequency> Frequencies => Enum.GetValues(typeof(Frequency)).Cast<Frequency>();
    private IList<CrawlSchedule> _scheduledTasks = [];
    private string _errorMessage = string.Empty;
    private bool _addNew;
    private string _urlRegex = @"[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\-+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)";

    protected override async Task OnInitializedAsync()
    {
        await LoadScheduledTasks();
    }

    private void ToggleAddNew()
    {
        _addNew = !_addNew;
    }

    private async Task LoadScheduledTasks()
    {
        ICollection<CrawlSchedule> scheduledItems = await ScheduleService.GetScheduledTasksByUserIdAndTypeAsync(User?.Id, Action);
        _scheduledTasks = scheduledItems.ToList();
    }

    private async Task HandleValidSubmit()
    {
        _errorMessage = string.Empty;

        try
        {
            CrawlSchedule scheduledTask = await ScheduleService.ScheduleTask(
                _scheduleTask.WebsiteUrl,
                User.Id,
                Action,
                _scheduleTask.Frequency
            );

            _scheduledTasks.Add(scheduledTask);
            _scheduledTasks = new List<CrawlSchedule>(_scheduledTasks);

            ToggleAddNew();
            _scheduleTask = new();
        }
        catch (UrlException e)
        {
            _errorMessage = e.Message;
        }
        catch (AlreadyScheduledException e)
        {
            _errorMessage = e.Message;
        }
        catch (Exception)
        {
            _errorMessage = "An error occurred";
        }
    }

    private async Task DeleteTask(CrawlSchedule schedule)
    {
            await ScheduleService.DeleteScheduledTask(schedule);
            _scheduledTasks.Remove(schedule);
            _scheduledTasks = new List<CrawlSchedule>(_scheduledTasks);
    }

}