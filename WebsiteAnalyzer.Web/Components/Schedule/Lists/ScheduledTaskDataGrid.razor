@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Core.Enums

<RadzenStack class="rz-mt-6">
    <RadzenDataGrid Data="ScheduledTasks"
                    AllowPaging="true"
                    PageSize="10"
                    EmptyText="No scheduled tasks">
        <Columns>
            <RadzenDataGridColumn Title="Website URL" Property="@nameof(CrawlSchedule.WebsiteUrl)"/>
            <RadzenDataGridColumn Title="Frequency" Property="@nameof(CrawlSchedule.Frequency)">
                <Template Context="schedule">
                    @schedule.Frequency.ToFriendlyString()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Action" Property="@nameof(CrawlSchedule.Action)"/>
            <RadzenDataGridColumn Title="Status" Property="@nameof(CrawlSchedule.Status)"/>
            <RadzenDataGridColumn Title="Last Check" Property="@nameof(CrawlSchedule.LastCrawlDate)"/>
            <RadzenDataGridColumn>
                <Template Context="schedule">
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Click="@(() => DeleteTask(schedule))"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@foreach (CrawlSchedule schedule in ScheduledTasks)
{
    <p>@schedule.WebsiteUrl</p>
}

@code {
    [Parameter] 
    public required ICollection<CrawlSchedule> ScheduledTasks { get; set; }

    [Parameter] 
    public required EventCallback<CrawlSchedule> OnScheduleDeleted { get; set; }

    private async Task DeleteTask(CrawlSchedule schedule)
    {
        if (OnScheduleDeleted.HasDelegate)
        {
            await OnScheduleDeleted.InvokeAsync(schedule);
        }
    }

}