@using BrokenLinkChecker.crawler
<div class="website-input-wrapper">
    <div class="website-input">
        <label for="urlInput" class="margin-bottom-m center-text">Website URL</label>
        <input type="url" id="urlInput" @bind="_targetUrl" required class="margin-bottom-m"/>
        <button type="button" @onclick="ChangeUri">Check Website</button>

        <label for="crawlModeSelect" class="margin-bottom-m center-text">Crawl Mode</label>
        <select id="crawlModeSelect" @onchange="OnCrawlModeChange" class="margin-bottom-m">
            <option value="SiteStats">Site Stats</option>
            <option value="CacheWarm">Cache Warm</option>
        </select>
        <p>Selected Crawl Mode: @SelectedCrawlMode</p>
    </div>

    @if (_hasError)
    {
        <p class="validation-message">@_errorMessage</p>
    }
</div>

@code {
    [Parameter]
    public EventCallback<Uri> UriHasChanged { get; set; }
    
    [Parameter]
    public CrawlMode SelectedCrawlMode { get; set; } = CrawlMode.SiteStats;

    [Parameter]
    public EventCallback<CrawlMode> SelectedCrawlModeChanged { get; set; }  // EventCallback to notify parent

    private string _targetUrl = "https://";
    private bool _hasError;
    private string _errorMessage = "";
    
    private async Task ChangeUri()
    {
        if (string.IsNullOrWhiteSpace(_targetUrl))
        {
            _hasError = true;
            _errorMessage = "Please enter a valid URL.";
            return;
        }

        try
        {
            _hasError = false;
            Uri uri = new Uri(_targetUrl, UriKind.Absolute);
            await UriHasChanged.InvokeAsync(uri);
        }
        catch (UriFormatException)
        {
            _hasError = true;
            _errorMessage = "The URL entered is not in a valid format.";
        }
    }

    private async Task OnCrawlModeChange(ChangeEventArgs e)
    {
        if (Enum.TryParse<CrawlMode>(e.Value.ToString(), out var mode))
        {
            SelectedCrawlMode = mode;
            await SelectedCrawlModeChanged.InvokeAsync(mode);  // Notify parent about crawl mode change
        }
    }
}
