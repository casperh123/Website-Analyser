@using WebsiteAnalyzer.Web.Components.ErrorHandling
@using WebsiteAnalyzer.Web.Components.Crawl.CrawlMetrics

<RadzenCard Style="max-width: 600px" Variant="Variant">
    <RadzenStack>
        @if (ShowUrl)
        {
            <RadzenLabel Component="url-input">Select Url</RadzenLabel>
            <RadzenTextBox Value="@Url" Change="ChangeUrl" AutoCompleteType="AutoCompleteType.Url" />
        }
        <RadzenButton Click="@OnChanged" Disabled="@IsProcessing">@ButtonText</RadzenButton>

        @if (IsProcessing)
        {
            <RadzenButton Click="OnCancel" ButtonStyle="ButtonStyle.Danger">Cancel</RadzenButton>
        }
    </RadzenStack>
    
    <ErrorMessage Message="@_errorMessage"/>
    
    @if (IsProcessing)
    {
        <CrawlMetrics LinksChecked="LinksChecked" LinksEnqueued="LinksEnqueued"/>   
    }
</RadzenCard>

@code {
    [Parameter, EditorRequired]
    public bool IsProcessing { get; set; }
    
    [Parameter, EditorRequired]
    public required string Url { get; set; }
    
    [Parameter, EditorRequired] 
    public EventCallback<Uri> WebsiteActionStarted { get; set; }

    [Parameter, EditorRequired] 
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public int LinksChecked { get; set; }

    [Parameter] 
    public int LinksEnqueued { get; set; }

    [Parameter] 
    public bool ShowUrl { get; set; } = true;

    [Parameter] 
    public string ButtonText { get; set; } = "Start";

    [Parameter] 
    public Variant Variant { get; set; } = Variant.Filled;
    
    private string _errorMessage = "";

    private void ChangeUrl(string url)
    {
        Url = url;
    }

    private async Task OnChanged()
    {
        _errorMessage = "";
        
        try
        {
            Uri uri = new Uri(Url, UriKind.Absolute);
            await WebsiteActionStarted.InvokeAsync(uri);
        }
        catch (UriFormatException e)
        {
            _errorMessage = e.Message;
        }
    }
}