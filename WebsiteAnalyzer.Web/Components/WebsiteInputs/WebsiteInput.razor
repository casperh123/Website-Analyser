@using System.Resources
@using Mono.TextTemplating
@using WebsiteAnalyzer.Web.Components.ErrorHandling
@using WebsiteAnalyzer.Web.Components.Crawl.CrawlMetrics
@using WebsiteAnalyzer.Web.Services

<RadzenCard Style="max-width: 600px">
    <RadzenStack>
        <RadzenLabel Component="url-input">Select Url</RadzenLabel>
        <RadzenTextBox Value="@Url" Change="ChangeUrl" AutoCompleteType="AutoCompleteType.Url"/>
        <RadzenButton Click="@OnChanged" Disabled="@IsProcessing">Check Broken Links</RadzenButton>

        @if (IsProcessing)
        {
            <RadzenButton Click="(() => OnCancel.InvokeAsync())" Style="background-color: red">Cancel</RadzenButton>
        }
    </RadzenStack>
    <ErrorMessage Message="@_errorMessage"/>
    <CrawlMetrics LinksChecked="LinksChecked" LinksEnqueued="LinksEnqueued"/>
</RadzenCard>

@code {
    [Parameter] public EventCallback<Uri> WebsiteActionStarted { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public int LinksChecked { get; set; }

    [Parameter] public int LinksEnqueued { get; set; }

    [Parameter] public string Url { get; set; } = string.Empty;

    [Parameter] public bool IsProcessing { get; set; }

    private string _errorMessage = "";

    private void ChangeUrl(string url)
    {
        Url = url;
    }

    private async Task OnChanged()
    {
        _errorMessage = "";

        if (string.IsNullOrWhiteSpace(Url))
        {
            return;
        }

        try
        {
            Uri uri = new Uri(Url, UriKind.Absolute);
            await WebsiteActionStarted.InvokeAsync(uri);
        }
        catch (UriFormatException)
        {
            _errorMessage = "The URL entered is not in a valid format.";
        }
    }

}