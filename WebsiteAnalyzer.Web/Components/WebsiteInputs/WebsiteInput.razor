@using System.Resources
@using Mono.TextTemplating
@using WebsiteAnalyzer.Web.Components.ErrorHandling
@using WebsiteAnalyzer.Web.Components.Crawl.CrawlMetrics
@using WebsiteAnalyzer.Web.Services

@inject StateService StateService

<RadzenCard Style="max-width: 600px">
    <RadzenStack>
        <RadzenLabel Component="url-input">Select Url</RadzenLabel>
        <RadzenTextBox Value="@Url" Change="ChangeUrl" AutoCompleteType="AutoCompleteType.Url"/>
        <RadzenButton Click="@OnChanged" Disabled="StateService.IsProcessing">Check Broken Links</RadzenButton>
        
        @if (StateService.IsProcessing)
        {
            <RadzenButton Click="OnCancelled" Style="background-color: red">Cancel</RadzenButton>
        }
    </RadzenStack>
    <ErrorMessage Message="@_errorMessage" />
    <CrawlMetrics LinksChecked="LinksChecked" LinksEnqueued="LinksEnqueued" />
</RadzenCard>

@code {
    [Parameter] 
    public EventCallback<Uri> WebsiteActionStarted { get; set; }
    
    [Parameter]
    public int LinksChecked { get; set; }
    
    [Parameter]
    public int LinksEnqueued { get; set; }

    [Parameter] public string Url { get; set; } = "https://";
    
    private string _errorMessage = "";

    private void ChangeUrl(string url)
    {
        Url = url;
    }

    private async Task OnChanged()
    {
        _errorMessage = "";
        
        if (string.IsNullOrWhiteSpace(Url))
        {
            return;
        }

        try
        {
            Uri uri = new Uri(Url, UriKind.Absolute);
            await WebsiteActionStarted.InvokeAsync(uri);
        }
        catch (UriFormatException)
        {
            _errorMessage = "The URL entered is not in a valid format.";
        }
    }

    private async Task OnCancelled()
    {
        await StateService.CancellationTokenSource.CancelAsync();
    }
}
