@page "/broken-link-checker"
@using System.Net
@using global::BrokenLinkChecker.Models.Links
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.WebsiteMetrics
@inject IBrokenLinkService BrokenLinkService

@rendermode InteractiveServer

<PageTitle>Broken Link Checker</PageTitle>

<h2>Broken Link Checker</h2>

<WebsiteInput WebsiteActionStarted="CheckBrokenLinks" IsProcessing="IsChecking" LinksChecked="_linksChecked" LinksEnqueued="_linksEnqueued"/>

@if (_linksChecked > 0)
{
    <RadzenStack class="rz-mt-6">
        <BrokenLinksStats BrokenLinks="_brokenLinks"/>
    </RadzenStack>
}

@code {
    private bool IsChecking { get; set; }
    private int _linksChecked;
    private int _linksEnqueued;
    private IList<IndexedLink> _brokenLinks = [];

    private async Task CheckBrokenLinks(Uri url)
    {
        try
        {
            IsChecking = true;
            ResetResults();

            await BrokenLinkService.FindBrokenLinks(url.ToString(), UpdateLinksEnqueued, UpdateLinksChecked, UpdateBrokenLinks);
        }
        finally
        {
            IsChecking = false;
            StateHasChanged();
        }
    }

    private void ResetResults()
    {
        _brokenLinks.Clear();
        _linksChecked = 0;
        _linksEnqueued = 0;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBrokenLinks(IndexedLink link)
    {
        if (link.StatusCode is HttpStatusCode.OK)
        {
            return;
        }

        _brokenLinks.Add(link);
        _brokenLinks = new List<IndexedLink>(_brokenLinks);
        InvokeAsync(StateHasChanged);
    }

}
