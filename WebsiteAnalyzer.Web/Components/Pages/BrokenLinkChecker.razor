@page "/broken-link-checker"
@* default *@
@attribute [Sitemap]

@using Sidio.Sitemap.Blazor
@using WebsiteAnalyzer.Core.DataTransferObject
@using WebsiteAnalyzer.Core.Enums
@using WebsiteAnalyzer.Core.Events
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.WebsiteMetrics
@using WebsiteAnalyzer.Web.Services
@using WebsiteAnalyzer.Web.Components.BrokenLink.Lists
@using WebsiteAnalyzer.Web.Components.Schedule

@inherits WebsiteAnalyzer.Web.Components.Templates.ProcessingComponentBase

@inject IBrokenLinkService BrokenLinkService
@inject IUserService UserService
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<PageTitle>Broken Link Checker</PageTitle>

<RadzenStack Style="max-width: 600px">
    <RadzenHeading Text="Broken Link Checker" />
    <RadzenText>
        Check your entire website for broken links in a few minutes.
        You can even schedule check, and be notified when new broken
        links are found!
    </RadzenText>
</RadzenStack>
<WebsiteInput
    Url="@_url"
    WebsiteActionStarted="StartBrokenLinkCheck"
    LinksChecked="_linksChecked"
    LinksEnqueued="_linksEnqueued"
    OnCancel="CancelProcessing"/>


<RadzenTabs class="rz-mt-12">
    <Tabs>
        <RadzenTabsItem Text="Broken Links">
            <BrokenLinksStats BrokenLinks="_brokenLinks"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="History">
            <BrokenLinkCrawlHistory BrokenLinkCrawls="_brokenLinkCrawls" IsProcessing="IsProcessing" OnRerun="RerunBrokenLink"/>
        </RadzenTabsItem>
            <RadzenTabsItem Text="Schedule">
                <WebsiteScheduler User="_user" Action="CrawlAction.BrokenLink" />
            </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [SupplyParameterFromQuery]
    public string? Url { get; set; }
    
    private int _linksChecked;
    private int _linksEnqueued;
    private string _url = "https://";
    private ICollection<BrokenLinkDTO> _brokenLinks = [];
    private ICollection<BrokenLinkCrawlDTO> _brokenLinkCrawls = [];
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        BrokenLinkService.ProgressUpdated += HandleProgressUpdate;
        _user = await UserService.GetCurrentUserAsync();
        _brokenLinkCrawls = await BrokenLinkService.GetCrawlsByUserAsync(_user?.Id);

        if (Url is not null)
        {
            _url = Url;
            await StartBrokenLinkCheck(new Uri(_url));
        }
    }

    private async Task RerunBrokenLink(string url)
    {
        await JsRuntime.InvokeVoidAsync("backToTop");
        _url = url;
        Uri uri = new Uri(url);
        await StartProcessingAsync(async (token) => await CheckBrokenLinks(uri, token));
    }

    private async Task StartBrokenLinkCheck(Uri url)
    {
        _url = url.ToString();
        await StartProcessingAsync(async (token) => await CheckBrokenLinks(url, token));
    }

    private async Task CheckBrokenLinks(Uri url, CancellationToken cancellationToken)
    {
        _brokenLinks.Clear();
        _linksChecked = 0;
        _linksEnqueued = 0;

        BrokenLinkCrawlDTO crawl = await BrokenLinkService.StartCrawl(url.ToString(), _user?.Id);

        _brokenLinkCrawls.Add(crawl);
        
        IAsyncEnumerable<BrokenLinkDTO> brokenLinks = BrokenLinkService.FindBrokenLinks(
            url.ToString(),
            crawl.Id,
            cancellationToken
        ); 
        
        await foreach (BrokenLinkDTO link in brokenLinks)
        {
            _brokenLinks.Add(link);
            _brokenLinks = new List<BrokenLinkDTO>(_brokenLinks);
            crawl.BrokenLinks.Add(link);
        }

        await BrokenLinkService.EndCrawl(crawl, _linksChecked, _user?.Id);
    }

    private async void HandleProgressUpdate(object? sender, CrawlProgressEventArgs args)
    {
        await InvokeAsync(() =>
        {
            _linksEnqueued = args.LinksEnqueued;
            _linksChecked = args.LinksChecked;
            StateHasChanged();
        });
    }
}
