@page "/broken-link-checker"
@using System.Net
@using global::BrokenLinkChecker.Models.Links
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.WebsiteMetrics
@using WebsiteAnalyzer.Web.Services

@inherits WebsiteAnalyzer.Web.Components.Templates.ProcessingComponentBase

@inject IBrokenLinkService BrokenLinkService
@inject IUserService UserService

@rendermode InteractiveServer

<PageTitle>Broken Link Checker</PageTitle>

<h2>Broken Link Checker</h2>

<WebsiteInput 
    WebsiteActionStarted="StartBrokenLinkCheck" 
    IsProcessing="IsProcessing" 
    LinksChecked="_linksChecked" 
    LinksEnqueued="_linksEnqueued"
    OnCancel="CancelProcessing"/>

@if (_linksChecked > 0)
{
    <RadzenStack class="rz-mt-6">
        <BrokenLinksStats BrokenLinks="_brokenLinks"/>
    </RadzenStack>
}

@code {
    private int _linksChecked;
    private int _linksEnqueued;
    private IList<IndexedLink> _brokenLinks = [];
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();
    }

    private async Task StartBrokenLinkCheck(Uri url)
    {
        ResetResults();
        await StartProcessingAsync(async (token) => await CheckBrokenLinks(url, token));
    }

    private async Task CheckBrokenLinks(Uri url, CancellationToken cancellationToken)
    {
        IAsyncEnumerable<IndexedLink> brokenLinks = BrokenLinkService.FindBrokenLinks(
            url.ToString(),
            _user?.Id,
            UpdateLinksEnqueued,
            UpdateLinksChecked,
            cancellationToken
        ); 
        
        await foreach (IndexedLink link in brokenLinks)
        {
            _brokenLinks.Add(link);
            _brokenLinks = new List<IndexedLink>(_brokenLinks);
        }
    }

    private void ResetResults()
    {
        _brokenLinks.Clear();
        _linksChecked = 0;
        _linksEnqueued = 0;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }
}
