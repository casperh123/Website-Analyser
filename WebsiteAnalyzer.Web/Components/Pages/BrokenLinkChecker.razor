@page "/broken-link-checker"

@using WebsiteAnalyzer.Core.DataTransferObject
@using WebsiteAnalyzer.Core.Entities.BrokenLink
@using WebsiteAnalyzer.Core.Events
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.WebsiteMetrics
@using WebsiteAnalyzer.Web.Services

@inherits WebsiteAnalyzer.Web.Components.Templates.ProcessingComponentBase

@inject IBrokenLinkService BrokenLinkService
@inject IUserService UserService

@rendermode InteractiveServer

<PageTitle>Broken Link Checker</PageTitle>

<h2>Broken Link Checker</h2>

<WebsiteInput 
    WebsiteActionStarted="StartBrokenLinkCheck" 
    IsProcessing="IsProcessing" 
    LinksChecked="_linksChecked" 
    LinksEnqueued="_linksEnqueued"
    OnCancel="CancelProcessing"/>

@if (_linksChecked > 0)
{
    <RadzenStack class="rz-mt-6">
        <BrokenLinksStats BrokenLinks="_brokenLinks"/>
    </RadzenStack>
}

@foreach (BrokenLinkCrawlDTO crawl in _brokenLinkCrawls)
{
    <RadzenText>@crawl.Url</RadzenText>
    <RadzenText>@crawl.LinksChecked</RadzenText>
}

@code {
    private int _linksChecked;
    private int _linksEnqueued;
    private ICollection<BrokenLinkDTO> _brokenLinks = [];
    private ICollection<BrokenLinkCrawlDTO> _brokenLinkCrawls = [];
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        BrokenLinkService.ProgressUpdated += HandleProgressUpdate;
        _user = await UserService.GetCurrentUserAsync();
        _brokenLinkCrawls = await BrokenLinkService.GetCrawlsByUserAsync(_user?.Id);
    }

    private async Task StartBrokenLinkCheck(Uri url)
    {
        await StartProcessingAsync(async (token) => await CheckBrokenLinks(url, token));
    }

    private async Task CheckBrokenLinks(Uri url, CancellationToken cancellationToken)
    {
        _brokenLinks.Clear();
        _linksChecked = 0;
        _linksEnqueued = 0;

        BrokenLinkCrawlDTO crawl = await BrokenLinkService.StartCrawl(url.ToString(), _user?.Id);

        _brokenLinkCrawls.Add(crawl);
        
        IAsyncEnumerable<BrokenLinkDTO> brokenLinks = BrokenLinkService.FindBrokenLinks(
            url.ToString(),
            _user?.Id,
            cancellationToken
        ); 
        
        await foreach (BrokenLinkDTO link in brokenLinks)
        {
            _brokenLinks.Add(link);
            _brokenLinks = new List<BrokenLinkDTO>(_brokenLinks);
            crawl.BrokenLinks.Add(link);
        }

        await BrokenLinkService.EndCrawl(crawl, _linksChecked, _user?.Id);
    }

    private async void HandleProgressUpdate(object? sender, CrawlProgressEventArgs args)
    {
        await InvokeAsync(() =>
        {
            _linksEnqueued = args.LinksEnqueued;
            _linksChecked = args.LinksChecked;
            StateHasChanged();
        });
    }
}
