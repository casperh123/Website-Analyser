@page "/website-analyser"
@using global::BrokenLinkChecker.Models.Links
@using WebsiteAnalyzer.Core.DataTransferObject
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.WebsiteMetrics
@using WebsiteAnalyzer.Web.Services
@inject IBrokenLinkService BrokenLinkService
@inject IUserService UserService

@rendermode InteractiveServer

<PageTitle>Cache Warmer</PageTitle>

<h2>Website Analyser</h2>

<WebsiteInput WebsiteActionStarted="CheckBrokenLinks"></WebsiteInput>

@if (IsChecking)
{
    <p>Crawling website, please wait...</p>
    <p>Links enqueued: @_linksEnqueued</p>
}

@if (_linksChecked > 0)
{
    <p>Links checked: @_linksChecked</p>

    <div class="padding-m round-corners box-shadow">
        <h2>Broken Links</h2>
        <BrokenLinksStats BrokenLinks="_brokenLinks"/>
    </div>
}

@code {
    private bool IsChecking { get; set; }
    private int _linksChecked;
    private int _linksEnqueued;
    private IList<BrokenLinkDTO> _brokenLinks = [];
    private ApplicationUser? _user;

    protected async override Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();
    }

    private async Task CheckBrokenLinks(Uri url)
    {
        try
        {
            IsChecking = true;
            ResetResults();

            //await BrokenLinkService.FindBrokenLinks(url.ToString(), _user.Id, UpdateLinksEnqueued, UpdateLinksChecked, UpdateBrokenLinks, new CancellationToken());
        }
        finally
        {
            IsChecking = false;
            StateHasChanged();
        }
    }

    private void ResetResults()
    {
        _brokenLinks.Clear();
        _linksChecked = 0;
        _linksEnqueued = 0;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBrokenLinks(BrokenLinkDTO link)
    {
        _brokenLinks.Add(link);
        InvokeAsync(StateHasChanged);
    }

}
