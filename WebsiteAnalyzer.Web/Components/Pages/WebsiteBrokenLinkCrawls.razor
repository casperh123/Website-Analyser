@page "/Website/{WebsiteId:guid}/brokenlinks"

@using WebsiteAnalyzer.Core.Contracts
@using WebsiteAnalyzer.Core.Contracts.BrokenLink
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Web.Components.BrokenLink.Cards
@using WebsiteAnalyzer.Web.Components.Layout

@inherits WebsiteAnalyzer.Web.Components.Templates.WebsiteComponent

@inject IBrokenLinkService BrokenLinkService

<WebsiteStatsLayout Website="Website">
    
    <RadzenColumn>
        <RadzenText TextStyle="TextStyle.DisplayH3">Broken Link Crawls</RadzenText>
        <RadzenButton Click="CheckBrokenLinks">Check For Broken Links</RadzenButton>
    </RadzenColumn>

    @if (_brokenLinkCrawls.Any())
    {
        <RadzenStack Gap="20px" Style="margin-top: 20px;">
            @foreach (BrokenLinkCrawlDTO brokenLink in _brokenLinkCrawls)
            {
                <BrokenLinkCrawlCard Crawl="brokenLink"></BrokenLinkCrawlCard>
            }
        </RadzenStack>
    }
    else
    {
        <RadzenText>There are no broken link crawls yet.</RadzenText>
    }
</WebsiteStatsLayout>

@code {

    private ICollection<BrokenLinkCrawlDTO> _brokenLinkCrawls = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _brokenLinkCrawls = await BrokenLinkService.GetBrokenLinkCrawlsByUrlAndUserId(Website.Url, User.Id);
    }

    public async Task CheckBrokenLinks()
    {
        BrokenLinkCrawlDTO crawl = await BrokenLinkService.StartCrawl(Website.Url, User.Id);
        IAsyncEnumerable<BrokenLinkDTO> brokenLinks = BrokenLinkService.FindBrokenLinks(Website.Url, crawl.Id);

        await foreach (BrokenLinkDTO brokenlink in brokenLinks)
        {
        }
    }

}