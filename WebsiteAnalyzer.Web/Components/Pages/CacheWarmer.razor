@page "/cache-warmer"

@using Mono.TextTemplating
@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Infrastructure.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.CacheWarm.Lists
@using WebsiteAnalyzer.Web.Services

@inject ICacheWarmingService CacheWarmingService
@inject IUserService UserService
@inject StateService StateService

<PageTitle>Cache Warmer</PageTitle>

<WebsiteInput Url="@_url" WebsiteActionStarted="WarmCache" LinksChecked="_linksChecked" LinksEnqueued="_linksEnqueued"/>

<AuthorizeView>
    <CacheWarmList OnRerunCacheWarm="RerunWarmCache" CacheWarms="_cacheWarms"/>
</AuthorizeView>

@code {
    private int _linksChecked;
    private int _linksEnqueued;
    private string _url = "https://";
    private ApplicationUser? _user;
    private ICollection<CacheWarm> _cacheWarms = [];

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();

        if (_user is not null)
        {
            _cacheWarms = await CacheWarmingService.GetCacheWarmsByUserAsync(_user.Id);
        }
    }

    private async Task RerunWarmCache(Website website)
    {
        _url = website.Url;
        await WarmCache(new Uri(_url));
    }
    
    private async Task WarmCache(Uri url)
    {
        CancellationTokenSource tokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = tokenSource.Token;

        StateService.CancellationTokenSource = tokenSource;
        StateService.IsProcessing = true;
        if (_user is null)
        {
            await CacheWarmingService.WarmCache(url.ToString(), UpdateLinksEnqueued, UpdateLinksChecked);
            return;
        }
        
        await CacheWarmingService.WarmCacheWithSaveAsync(url.ToString(), _user.Id, UpdateLinksEnqueued, UpdateLinksChecked);

        _cacheWarms = await CacheWarmingService.GetCacheWarmsByUserAsync(_user.Id);
        
        StateService.IsProcessing = false;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

}
