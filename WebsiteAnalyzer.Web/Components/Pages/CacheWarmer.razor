@page "/cache-warmer"

@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Infrastructure.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs

@inject ICacheWarmingService CacheWarmingService

<PageTitle>Cache Warmer</PageTitle>

<WebsiteInput WebsiteActionStarted="CheckBrokenLinks"></WebsiteInput>

@if (IsChecking)
{
    <RadzenText>Crawling website, please wait...</RadzenText>
    <RadzenText>Links enqueued: @_linksEnqueued</RadzenText>
}

@if (_linksChecked > 0)
{
    <RadzenText>Links checked: @_linksChecked</RadzenText>
}

@foreach (CacheWarm cacheWarm in _cacheWarms)
{
    <RadzenCard>
        <RadzenText>@cacheWarm.Id</RadzenText>
        <RadzenText>@cacheWarm.Website</RadzenText>
        <RadzenText>@cacheWarm.StartTime</RadzenText>
        <RadzenText>@cacheWarm.EndTime</RadzenText>
        <RadzenText>@cacheWarm.VisitedPages</RadzenText>
        <RadzenText>@cacheWarm.IsCompleted</RadzenText>
    </RadzenCard>
}

@code {
    private bool IsChecking { get; set; }
    private int _linksChecked;
    private int _linksEnqueued;
    private ICollection<CacheWarm> _cacheWarms = [];

    protected override async Task OnInitializedAsync()
    {
        _cacheWarms = await CacheWarmingService.GetCacheWarmsAsync();
    }
    
    private async Task CheckBrokenLinks(Uri url)
    {
        IsChecking = true;

        ResetResults();

        await CacheWarmingService.WarmCacheAsync(url.ToString(), UpdateLinksEnqueued, UpdateLinksChecked);

        IsChecking = false;
        _cacheWarms = await CacheWarmingService.GetCacheWarmsAsync();

    }

    private void ResetResults()
    {
        _linksChecked = 0;
        _linksEnqueued = 0;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

}
