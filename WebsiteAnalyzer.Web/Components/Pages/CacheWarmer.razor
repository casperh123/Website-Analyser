@page "/cache-warmer"

@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Infrastructure.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.CacheWarm.Lists

@inject ICacheWarmingService CacheWarmingService

<PageTitle>Cache Warmer</PageTitle>

<WebsiteInput WebsiteActionStarted="CheckBrokenLinks" LinksChecked="_linksChecked" LinksEnqueued="_linksEnqueued"/>
<CacheWarmList CacheWarms="_cacheWarms"/>

@code {
    private int _linksChecked;
    private int _linksEnqueued;
    private ICollection<CacheWarm> _cacheWarms = [];

    protected override async Task OnInitializedAsync()
    {
        _cacheWarms = await CacheWarmingService.GetCacheWarmsAsync();
    }
    
    private async Task CheckBrokenLinks(Uri url)
    {
        await CacheWarmingService.WarmCacheAsync(url.ToString(), UpdateLinksEnqueued, UpdateLinksChecked);

        _cacheWarms = await CacheWarmingService.GetCacheWarmsAsync();
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

}
