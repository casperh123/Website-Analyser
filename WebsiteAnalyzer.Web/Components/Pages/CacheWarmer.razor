@page "/cache-warmer"
@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Infrastructure.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@inject ICacheWarmingService CacheWarmingService

@rendermode InteractiveServer

<h2>Website Analyser</h2>

<WebsiteInput UriHasChanged="CheckBrokenLinks"></WebsiteInput>

@if (IsChecking)
{
    <p>Crawling website, please wait...</p>
    <p>Links enqueued: @_linksEnqueued</p>
}

@if (_linksChecked > 0)
{
    <p>Links checked: @_linksChecked</p>
}

@foreach (CacheWarmRun run in _cacheWarmRuns)
{
    <p>@run.Id</p>
    <p>@run.Website</p>
    <p>@run.StartTime</p>
    <p>@run.EndTime</p>
    <p>@run.VisitedPages</p>
}

@code {
    private bool IsChecking { get; set; }
    private int _linksChecked;
    private int _linksEnqueued;
    private IEnumerable<CacheWarmRun> _cacheWarmRuns = [];

    protected async override void OnInitialized()
    {
        _cacheWarmRuns = await CacheWarmingService.GetCacheWarmRunsAsync();
    }

    private async Task CheckBrokenLinks(Uri url)
    {
            IsChecking = true;
            
            ResetResults();
            
            CacheWarmRun cacheWarmRun = 
                await CacheWarmingService.WarmCacheAsync(url.ToString(), UpdateLinksEnqueued, UpdateLinksChecked);

            _cacheWarmRuns = await CacheWarmingService.GetCacheWarmRunsAsync();
            
            IsChecking = false;
    }
    
    private void ResetResults()
    {
        _linksChecked = 0;
        _linksEnqueued = 0;
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }
}
