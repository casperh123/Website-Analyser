@page "/cache-warmer"

@using WebsiteAnalyzer.Core.Entities
@using WebsiteAnalyzer.Core.Enums
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Infrastructure.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.CacheWarm.Lists
@using WebsiteAnalyzer.Web.Services
@using WebsiteAnalyzer.Web.Components.Schedule
@using WebsiteAnalyzer.Web.Components.User

@inherits WebsiteAnalyzer.Web.Components.Templates.ProcessingComponentBase

@inject ICacheWarmingService CacheWarmingService
@inject IUserService UserService

<PageTitle>Cache Warmer</PageTitle>

<RadzenHeading Text="Cache Warmer" />

<div style="max-width: 600px;">
    <RadzenText class="mb-4">
        Keep your website lightning-fast by proactively loading pages into your server's cache.
        Our cache warming tool crawls your entire site systematically, ensuring every page is
        ready to serve visitors instantly, eliminating those costly first-load delays.
    </RadzenText>

    <RadzenText class="mb-6">
        Whether you've just deployed changes or are preparing for high traffic, cache warming
        helps maintain consistent, rapid response times. Watch the process in real-time, review
        past warming sessions, and automate the whole process with our scheduling feature.
    </RadzenText>
</div>

<WebsiteInput Url="@_url" IsProcessing="IsProcessing" LinksChecked="_linksChecked" LinksEnqueued="_linksEnqueued"
              OnCancel="CancelProcessing" WebsiteActionStarted="StartWarm"/>

<AuthorizeView>
        <RadzenTabs class="rz-mt-12" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server">
        <Tabs>
            <RadzenTabsItem Text="Previous Warms">
                <CacheWarmList OnRerunCacheWarm="RerunWarmCache" User="_user" CacheWarms="_cacheWarms"
                               IsProcessing="IsProcessing"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Schedule">
                <WebsiteScheduler Action="CrawlAction.CacheWarm" User="_user"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</AuthorizeView>

<SignUp User="_user"/>

<HeadContent>
    <meta name="description" content="">
</HeadContent>

@code {
    private int _linksChecked;
    private int _linksEnqueued;
    private string _url = "https://";
    private ApplicationUser? _user;
    private IList<CacheWarm> _cacheWarms = [];

    protected override async Task OnInitializedAsync()
    {
        _user = await UserService.GetCurrentUserAsync();

        if (_user is not null)
        {
            ICollection<CacheWarm> cacheWarms = await CacheWarmingService.GetCacheWarmsByUserAsync(_user.Id);
            _cacheWarms = cacheWarms.ToList();
        }
    }

    private Task RerunWarmCache(string websiteUrl)
    {
        _url = websiteUrl;
        return StartWarm(new Uri(_url));
    }

    public Task StartWarm(Uri url)
    {
        _url = url.ToString();
        return StartProcessingAsync(async (token) => await WarmCache(url, token));
    }

    private async Task WarmCache(Uri url, CancellationToken cancellationToken)
    {
        if (_user is null)
        {
            await CacheWarmingService.WarmCache(
                url.ToString(),
                UpdateLinksEnqueued,
                UpdateLinksChecked,
                cancellationToken
            );
            return;
        }

        await CacheWarmingService.WarmCacheWithSaveAsync(url.ToString(), _user.Id,
            UpdateLinksEnqueued,
            UpdateLinksChecked,
            cancellationToken
        );

        ICollection<CacheWarm> cacheWarms = await CacheWarmingService.GetCacheWarmsByUserAsync(_user.Id);
        _cacheWarms = cacheWarms.ToList();
    }

    private void UpdateLinksEnqueued(int count)
    {
        _linksEnqueued = count;
        InvokeAsync(StateHasChanged);
    }

    private void UpdateLinksChecked(int count)
    {
        _linksChecked = count;
        InvokeAsync(StateHasChanged);
    }

}