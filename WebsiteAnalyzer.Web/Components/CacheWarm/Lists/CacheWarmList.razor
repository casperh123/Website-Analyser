@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Infrastructure
@using WebsiteAnalyzer.Web.Components.CacheWarm.Badges
@using CacheWarm = global::WebsiteAnalyzer.Core.Entities.CacheWarm

@inject ICacheWarmingService CacheWarmingService
@inject IJSRuntime JsRuntime

@if (CacheWarms.Any())
{
    <RadzenDataGrid
        AllowFiltering="true"
        AllowSorting="true"
        PageSize="10"
        AllowPaging="true"
        ShowPagingSummary="true"
        Data="CacheWarms"
        FilterMode="FilterMode.Simple">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(CacheWarm.TotalTime)" Title="Total Time" Width="100px" Filterable="false">
                <Template Context="cacheWarm">
                    @cacheWarm.TotalTime.ToString(@"hh\:mm\:ss")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(CacheWarm.StartTimeUtc)" Title="Start Time" Width="200px" Filterable="false"/>
            <RadzenDataGridColumn Property="@nameof(CacheWarm.VisitedPages)" Title="Visited Pages" Width="200px" Filterable="false"/>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] 
    public required EventCallback<Uri> OnRerunCacheWarm { get; set; }

    [Parameter] 
    public required ApplicationUser User { get; set; }

    [Parameter] 
    public required IEnumerable<CacheWarm> CacheWarms { get; set; }

    [Parameter] 
    public required bool IsProcessing { get; set; }

    public async Task OnCacheWarmRerun(CacheWarm cacheWarm)
    {
        if (OnRerunCacheWarm.HasDelegate)
        {
            await JsRuntime.InvokeVoidAsync("backToTop");
        }
    }

}
