@page "/cache-warmer"

@* default *@
@attribute [Sitemap]
@using global::BrokenLinkChecker.Models.Links
@using global::BrokenLinkChecker.Models.Result
@using Sidio.Sitemap.Blazor
@using WebsiteAnalyzer.Core.Contracts.CacheWarm
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Web.Components.WebsiteInputs
@using WebsiteAnalyzer.Web.Components.CacheWarm.Seo
@using WebsiteAnalyzer.Web.Components.CacheWarm.Cards

@inherits WebsiteAnalyzer.Web.Components.Templates.ProcessingComponentBase

@inject ICacheWarmingService CacheWarmingService

<PageTitle>Cache Warmer</PageTitle>

<RadzenHeading Text="Cache Warmer" />

<CacheWarmIntroText />

<RadzenStack Gap="20">
    <WebsiteInput
        Url="@_url"
        IsProcessing="IsProcessing"
        LinksChecked="_linksChecked" 
        LinksEnqueued="_linksEnqueued"
        OnCancel="CancelProcessing" 
        WebsiteActionStarted="StartWarm"/>

    @if (_latestCrawl is not null)
    {
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.DisplayH4">Last Crawl</RadzenText>
            <CacheWarmCard CacheWarm="_latestCrawl"/>
        </RadzenStack>
    }
</RadzenStack>

<HeadContent>
    <meta name="description" content="Boost website performance with automated cache warming. Proactively load pages into your server's cache, eliminate first-load delays, and maintain lightning-fast speeds for all visitors.">
</HeadContent>

<CacheWarmSeoText />

@code {
    [SupplyParameterFromQuery]
    public string? Url { get; set; }
    
    private int _linksChecked;
    private int _linksEnqueued;
    private string _url = "https://";
    private AnonymousCacheWarm? _latestCrawl;
    private IProgress<CrawlProgress<Link>> progress;

    protected override async Task OnInitializedAsync()
    {
        progress = new Progress<CrawlProgress<Link>>(p =>
            {
                _linksChecked = p.LinksChecked;
                _linksEnqueued = p.LinksEnqueued;
                InvokeAsync(StateHasChanged);
            }
        );
        
        if (Url is not null)
        {
            _url = Url;
            await StartWarm(new Uri(_url));
        }
    }

    public async Task StartWarm(Uri url)
    {
        _url = url.ToString();
        await StartProcessingAsync(async (token) => await WarmCache(url, token));
    }

    private async Task WarmCache(Uri url, CancellationToken cancellationToken)
    {
        _latestCrawl = await CacheWarmingService.WarmCacheAnonymous(
            url.ToString(),
            progress,
            cancellationToken
        );
    }
}