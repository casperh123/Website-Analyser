@page "/Website/{WebsiteId:guid}/uptime"

@using WebsiteAnalyzer.Core.Contracts.Uptime
@using WebsiteAnalyzer.Core.Domain.Uptime
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Web.Components.Layout

@inherits WebsiteAnalyzer.Web.Components.Templates.WebsiteComponent

@inject IUptimeService UptimeService

<WebsiteStatsLayout Website="Website" Websites="Websites">
    <RadzenCard>
        @foreach (UptimeStat downtime in _downtimePings)
        {
            <RadzenCard>
                <RadzenText>@downtime.TimeRecorded.ToLocalTime()</RadzenText>
            </RadzenCard>
        }
    </RadzenCard>
</WebsiteStatsLayout>


@code {
    private IEnumerable<UptimeStat> _downtimePings => _uptimeStats.Where(stat => stat.Outage);
    private IEnumerable<UptimeStat> _uptimeStats = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Website is null)
        {
            return;
        }

        DateTime beforeDate = DateTime.UtcNow.Subtract(TimeSpan.FromDays(30));

        _uptimeStats = await UptimeService.GetByWebsiteAfterDate(Website.Id, beforeDate);
        Console.WriteLine("");
    }
}