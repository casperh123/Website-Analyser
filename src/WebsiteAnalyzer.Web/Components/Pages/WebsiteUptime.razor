@page "/Website/{WebsiteId:guid}/uptime"

@using WebsiteAnalyzer.Core.Contracts.Uptime
@using WebsiteAnalyzer.Core.Interfaces.Services
@using WebsiteAnalyzer.Web.Components.Layout

@inherits WebsiteAnalyzer.Web.Components.Templates.WebsiteComponent

@inject IUptimeService UptimeService

<WebsiteStatsLayout Website="Website" Websites="Websites">
    <RadzenCard>
        <RadzenChart>
            <RadzenLineSeries Data="@_uptimeStats" CategoryProperty="@nameof(UptimeStat.TimeRecorded)" Title="Outages" ValueProperty="@nameof(UptimeStat.Outages)">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Circle" StrokeWidth="2" Size="4" />
                </ChildContent>                
                <TooltipTemplate Context="uptimeStat">
                    <RadzenStack>
                        <RadzenText>Outages recorded: @uptimeStat.Outages</RadzenText>
                        <RadzenText>Http status code: @((int)uptimeStat?.StatusCode)</RadzenText>
                        <RadzenText>Reason: @uptimeStat.Reason</RadzenText>
                    </RadzenStack> 
                </TooltipTemplate>
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" />
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Outages" />
            </RadzenValueAxis>
            <RadzenCategoryAxis Formatter="@FormatTime">
                <RadzenAxisTitle Text="Time" />
            </RadzenCategoryAxis>
        </RadzenChart>
    </RadzenCard>
</WebsiteStatsLayout>


@code {
    private IEnumerable<UptimeStat> _uptimeStats = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Website is null)
        {
            return;
        }

        DateTime beforeDate = DateTime.UtcNow.Subtract(TimeSpan.FromDays(3));

        _uptimeStats = await UptimeService.GetByWebsiteAfterDate(Website.Id, beforeDate);
        Console.WriteLine("");
    }

    private String FormatTime(object toFormat)
    {
        DateTime time = (DateTime)toFormat;
        return time.ToString("dd/MM HH:mm");
    }
}